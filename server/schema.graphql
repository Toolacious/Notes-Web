scalar Upload

type Query {
    users(query: String): [User!]!
    user(query: ID): User
}

type Mutation {
    createUser(data: CreateUserInput!): User!
    clearMessages(query: String): ClearMessage!
    login(data: LoginInput!): Token!
    logout: Boolean!
    signS3(filename: String!, filetype: String!): S3Payload!
    upload(picture: Upload): Boolean!
    createNote(data: newNoteInput!): Boolean!
    updateNote(data: updateNoteInput!): Boolean!
    deleteNote(id: ID!, email: String!): Boolean!
}

type S3Payload {
    signedRequest: String!
    url: String!
}

type Subscription {
    message: MessageSubscriptionPayload!
    note: NoteSubscriptionPayload!
    errors: ErrorMessageSubscriptionPayload!
}

input CreateUserInput {
    fname: String!
    lname: String!
    name: String!
    email: String!
    password: String!
}

input LoginInput {
    email: String!
    password: String!
}

input newNoteInput {
    email: String!
    title: String!
    markdown: String!
    tags: [String]!
    links: [String]!
}

input updateNoteInput {
    id: ID!
    email: String!
    title: String!
    markdown: String!
    tags: [String]!
    links: [String]!
}

type User {
    id: ID!
    name: String!
    email: String!
    password: String!
}

type Note {
    id: ID!
    email: String!
    title: String!
    markdown: String!
    tags: [String]!
    links: [String]!
}

type Token {
    accessToken: String!
    userId: ID!
    name: String!
    email: String!
}

enum MutationType {
    CREATED
    UPDATED
    DELETED
}

"""
if Mutation is CREATED => Subscription return mutation and created data
if Mutation is DELETED => Subscription return mutation and left data
"""
type MessageSubscriptionPayload {
    mutation: MutationType!
    data: [User!]
}

type NoteSubscriptionPayload {
    mutation: MutationType!
    data: Note!
}

type ErrorMessageSubscriptionPayload {
    message: String!
    context: contextMsg!
}

type contextMsg {
    value: String
    invalid: [String]
    key: String!
    label: String!
}

type ClearMessage {
    mutation: MutationType!
    name: String
}
